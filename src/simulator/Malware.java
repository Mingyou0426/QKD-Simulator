/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package simulator;

import java.awt.BorderLayout;
import java.awt.Graphics;
import java.awt.GridLayout;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.MalformedURLException;
import java.net.SocketException;
import java.net.UnknownHostException;
import java.rmi.Naming;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JSeparator;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;
import javax.swing.table.TableModel;
import javax.xml.transform.Source;
import org.bouncycastle.jcajce.provider.digest.SHA3;
import org.bouncycastle.jcajce.provider.digest.SHA3.DigestSHA3;

/**
 *
 * @author Jincowboy
 */
public class Malware {
    JFrame window; // This is Main Window
    JFrame winDataProcess;
    JFrame winDecipheredModule;
    JFrame winIntrusionDetection;

    JMenuBar menuBar = new JMenuBar(); // Window menu bar
    JMenu passMenu = new JMenu("Password");
    JMenu extMenu = new JMenu("Extensions");
    JMenuItem itemInputCCIP = new JMenuItem("Input IP for C&C");
    JMenuItem itemInputSourceIP = new JMenuItem("Input IP for Source");
    JMenuItem itemInputKeyLength = new JMenuItem("Input Key Length");
    JMenuItem itemStartGeneration = new JMenuItem("Start generation");
    JMenuItem itemShowCommunicationResult = new JMenuItem("Show Communication Result");
    JMenuItem itemSendEncryptedMsg = new JMenuItem("Send encrypted message");
    JMenuItem itemIntrusionDetection = new JMenuItem("Intrusion Detection");

    JPanel pan4InputIP = new JPanel();
    String strCCIP = "";
    JTextField txtIP = new JTextField();
    String strSourceIP = "";
    JPanel pan4InputKeyLength = new JPanel();
    JTextField txtInputKeyLength = new JTextField();
    String strInputKeyLength = "";
    Object[] opt4Button = { "Accept" };

    JLabel lblDataProcess;
    JTable tblDataProcess;
    JPanel panDataProcess;

    int ROW_COUNT = 4;
    int COL_COUNT = 33;
    int ROW_COUNT4ID = 7;

    JTextField txtUseoftheAgreedKey;
    JLabel lblUseoftheAgreedKey;
    JTextField txtUseoftheHashobtainedbyMalware;
    JLabel lblUseoftheHashobtainedbyMalware;
    JTextField txtInitialKeySize;
    JLabel lblInitialKeySize;
    JTextField txtFinalKeySize;
    JLabel lblFinalKeySize;
    JTextField txtPercentage;
    JLabel lblPercentage;

    JTextField txtIPReceiver;
    JLabel lblIPReceiver;
    JTextField txtKey;
    JLabel lblKey;
    JTextField txtLastMsgSent;
    JLabel lblLastMsgSent;
    JTextField txtMessageSent;
    JLabel lblMessageSent;
    JButton btnSubmit;

    JLabel lblIntrusionDetection;
    JTable tblIntrusionDetection;
    JPanel panIntrusionDetection;

    private static SourceService lookup4Source = null;
    private static CCService lookup4CC = null;

    String strEntangledParticles = "";

    String strBase4Malware = "";
    String strBase4CC = "";
    String [] schemes = {"(-)", "(/)", "(|)", "(\\)"};
    String [] particles = {"|↓>", "|↑>"};

    String strKeyGenerated = "";

    String strParticles4Soc = "";
    String strBase4Soc = "";

    Malware(){
        DatagramSocket socket = null;
        try {
            socket = new DatagramSocket();
        } catch (SocketException ex) {
            Logger.getLogger(Malware.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            socket.connect(InetAddress.getByName("8.8.8.8"), 10002);
        } catch (UnknownHostException ex) {
            Logger.getLogger(Malware.class.getName()).log(Level.SEVERE, null, ex);
        }

        final String ip = socket.getLocalAddress().getHostAddress();

        System.setProperty("java.security.policy","file:./security.policy");
        
        window = new JFrame("Malware - Quantum Communication Protocol E91");
        window.setSize(600, 480); // Height And Width Of Window
        window.setLocationRelativeTo(null); // Move Window To Center

        window.setJMenuBar(menuBar);
        menuBar.add(passMenu);
        
        passMenu.add(itemInputSourceIP);
        itemInputSourceIP.addActionListener(new ActionListener(){
            public void actionPerformed(ActionEvent e) {
                int result = JOptionPane.showOptionDialog(null, pan4InputIP, "Input IP for Source",
                        JOptionPane.OK_OPTION, JOptionPane.PLAIN_MESSAGE,
                        null, opt4Button, null);
                if (result == JOptionPane.OK_OPTION){
                    strSourceIP = txtIP.getText();
                    if ( strSourceIP.equals("") ) {
                        JOptionPane.showMessageDialog(null, "Please input source ip correctly", "Error", JOptionPane.OK_OPTION);
                        return;
                    }
                    /* if (System.getSecurityManager() == null) {
                        System.setSecurityManager(new SecurityManager());
                    } */
                    try {
                        String connectLocation = "//" + strSourceIP + ":1099/SourceRMI";
                        try {
                            System.out.println("Connecting to source at : " + connectLocation);
                            lookup4Source = (SourceService) Naming.lookup(connectLocation);
                            lookup4Source.getMalwareIP(ip);
                        } catch (NotBoundException ex) {
                            Logger.getLogger(Malware.class.getName()).log(Level.SEVERE, null, ex);
                        } catch (MalformedURLException ex) {
                            Logger.getLogger(Malware.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    } catch (RemoteException ex) {
                        Logger.getLogger(Malware.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        });
        
        passMenu.add(itemInputCCIP);
        
        pan4InputIP.add(new JLabel("IP Address:"));
        pan4InputIP.add(txtIP);
        pan4InputIP.setLayout(new GridLayout(1,2));

        itemInputCCIP.addActionListener(new ActionListener(){
            public void actionPerformed(ActionEvent e) {
                int result = JOptionPane.showOptionDialog(null, pan4InputIP, "Input IP for C&C",
                        JOptionPane.OK_OPTION, JOptionPane.PLAIN_MESSAGE,
                        null, opt4Button, null);
                if (result == JOptionPane.OK_OPTION){
                    strCCIP = txtIP.getText();
                    /* if (System.getSecurityManager() == null) {
                        System.setSecurityManager(new SecurityManager());
                    } */
                    if ( strSourceIP.equals("") ) {
                        JOptionPane.showMessageDialog(null, "Please input source ip first", "Error", JOptionPane.OK_OPTION);
                        return;
                    }
                    if ( lookup4Source==null ) {
                        JOptionPane.showMessageDialog(null, "Not found any source. Please check source ip again", "Error", JOptionPane.OK_OPTION);
                        return;
                    }
                    try {
                        lookup4Source.getCCIP(strCCIP);
                    } catch (RemoteException ex) {
                        Logger.getLogger(Malware.class.getName()).log(Level.SEVERE, null, ex);
                    }

                    try {
                        String connectLocation = "//" + strCCIP + ":1199/CCRMI";
                        try {
                            System.out.println("Connecting to cc at : " + connectLocation);
                            lookup4CC = (CCService) Naming.lookup(connectLocation);
                            lookup4CC.getMalwareIP(ip);
                            lookup4CC.getSourceIP(strSourceIP);

                            txtIPReceiver.setText(strCCIP);
                        } catch (NotBoundException ex) {
                            Logger.getLogger(Malware.class.getName()).log(Level.SEVERE, null, ex);
                        } catch (MalformedURLException ex) {
                            Logger.getLogger(Malware.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    } catch (RemoteException ex) {
                        Logger.getLogger(Malware.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        });

        passMenu.add(itemInputKeyLength);

        pan4InputKeyLength.add(new JLabel("Input Key Length:"));
        pan4InputKeyLength.add(txtInputKeyLength);
        pan4InputKeyLength.setLayout(new GridLayout(1,2));

        itemInputKeyLength.addActionListener(new ActionListener(){
            public void actionPerformed(ActionEvent e) {
                int result = JOptionPane.showOptionDialog(null, pan4InputKeyLength, "Input Key Length",
                        JOptionPane.OK_OPTION, JOptionPane.PLAIN_MESSAGE,
                        null, opt4Button, null);
                if (result == JOptionPane.OK_OPTION){
                    strInputKeyLength = txtInputKeyLength.getText();

                    if ( strSourceIP.equals("") ) {
                        JOptionPane.showMessageDialog(null, "Please input source ip first", "Error", JOptionPane.OK_OPTION);
                        return;
                    }

                    if ( strCCIP.equals("") ) {
                        JOptionPane.showMessageDialog(null, "Please input C&C ip", "Error", JOptionPane.OK_OPTION);
                        return;
                    }

                    if ( lookup4Source==null ) {
                        JOptionPane.showMessageDialog(null, "Not found any source. Please check source ip again", "Error", JOptionPane.OK_OPTION);
                        return;
                    }

                    if ( lookup4CC==null ) {
                        JOptionPane.showMessageDialog(null, "Not found any cc. Please check cc ip again", "Error", JOptionPane.OK_OPTION);
                        return;
                    }

                    try {
                        lookup4Source.getKeyLength(strInputKeyLength);

                        long startTime = System.nanoTime();
                        strEntangledParticles=lookup4Source.getEntangledParticles(0);
                        long endTime = System.nanoTime();
                        lookup4Source.afterParticlesSendingDone((int)((endTime-startTime)/1000000), 0);

                        Random rand = new Random();
                        for ( int i=0; i<Integer.parseInt(strInputKeyLength); i++ ) {
                            // strBase4Malware = strBase4Malware+schemes[rand.nextInt(4)];
                            strBase4Malware = strBase4Malware+String.valueOf(rand.nextInt(4));
                        }
                    } catch (RemoteException ex) {
                        Logger.getLogger(Malware.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        });

        passMenu.add(new JSeparator());
        passMenu.add(itemStartGeneration);
        itemStartGeneration.addActionListener(new ActionListener(){
            public void actionPerformed(ActionEvent e) {
                if ( lookup4Source==null ) {
                    JOptionPane.showMessageDialog(null, "Not found any source. Please check source ip again", "Error", JOptionPane.OK_OPTION);
                    return;
                }
                try {
                    if (!lookup4Source.isInterlacedParticlesSent()) {
                        JOptionPane.showMessageDialog(null, "Interlaced Particles are not received. Please check.", "Error", JOptionPane.OK_OPTION);
                        return;
                    }
                } catch (RemoteException ex) {
                    Logger.getLogger(Malware.class.getName()).log(Level.SEVERE, null, ex);
                }

                COL_COUNT = 1;

                String [][] data4Table = new String[ROW_COUNT][COL_COUNT];
                String[] header = new String[COL_COUNT];

                header[0] = "";
                data4Table[0][0] = "Particles received by Malware";
                data4Table[1][0] = "Scheme generated by Malware";
                data4Table[2][0] = "Scheme generated by C&C(received)";
                data4Table[3][0] = "Coincidences obtained by Malware";
                /* for ( int i=1; i<COL_COUNT; i++ ) {
                    header[i] = String.valueOf(i);
                    data4Table[0][i] = "";
                    data4Table[1][i] = "";
                    data4Table[2][i] = "";
                    data4Table[3][i] = "";
                } */

                TableModel model1 = new DefaultTableModel(data4Table, header)
                {
                    public boolean isCellEditable(int row, int column)
                    {
                        return false;//This causes all cells to be not editable
                    }
                };
                tblDataProcess.setModel(model1);
                tblDataProcess.getColumnModel().getColumn(0).setPreferredWidth(250);
                final TableColumnModel columnModel1 = tblDataProcess.getColumnModel();
                for (int column = 1; column < tblDataProcess.getColumnCount(); column++) {
                    int width = 30;
                    columnModel1.getColumn(column).setPreferredWidth(width);
                }
                tblDataProcess.setRowHeight(0, 30);
                tblDataProcess.setRowHeight(1, 30);
                tblDataProcess.setRowHeight(2, 30);
                tblDataProcess.setRowHeight(3, 30);
                tblDataProcess.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);

                String [][] data4Table4id1 = new String[ROW_COUNT4ID][COL_COUNT];
                String[] header4id1 = new String[COL_COUNT];

                header4id1[0] = "";
                data4Table4id1[0][0] = "Particles received by Malware";
                data4Table4id1[1][0] = "Scheme generated by Soc(Intruder)";
                data4Table4id1[2][0] = "Particles generated by Soc";
                data4Table4id1[3][0] = "Scheme generated by C&C(received)";
                data4Table4id1[4][0] = "Coincidences obtained by Soc";
                data4Table4id1[5][0] = "Coincidences obtained by C&C";
                data4Table4id1[6][0] = "Check by particles received by Malware";
                /* for ( int i=1; i<COL_COUNT; i++ ) {
                    header[i] = String.valueOf(i);
                    data4Table[0][i] = "";
                    data4Table[1][i] = "";
                    data4Table[2][i] = "";
                    data4Table[3][i] = "";
                } */

                TableModel model4id1 = new DefaultTableModel(data4Table4id1, header4id1)
                {
                    public boolean isCellEditable(int row, int column)
                    {
                        return false;//This causes all cells to be not editable
                    }
                };
                tblIntrusionDetection.setModel(model4id1);
                tblIntrusionDetection.getColumnModel().getColumn(0).setPreferredWidth(250);
                final TableColumnModel columnModel4id1 = tblIntrusionDetection.getColumnModel();
                for (int column = 1; column < tblIntrusionDetection.getColumnCount(); column++) {
                    int width = 30;
                    columnModel4id1.getColumn(column).setPreferredWidth(width);
                }
                tblIntrusionDetection.setRowHeight(0, 30);
                tblIntrusionDetection.setRowHeight(1, 30);
                tblIntrusionDetection.setRowHeight(2, 30);
                tblIntrusionDetection.setRowHeight(3, 30);
                tblIntrusionDetection.setRowHeight(4, 30);
                tblIntrusionDetection.setRowHeight(5, 30);
                tblIntrusionDetection.setRowHeight(6, 30);
                tblIntrusionDetection.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);

                COL_COUNT = Integer.parseInt(strInputKeyLength)+1;

                DefaultTableModel model = (DefaultTableModel)tblDataProcess.getModel();
                for ( int i=1; i<COL_COUNT; i++ ) {
                    model.addColumn(String.valueOf(i));
                }

                tblDataProcess.getColumnModel().getColumn(0).setPreferredWidth(250);
                final TableColumnModel columnModel = tblDataProcess.getColumnModel();
                for (int column = 1; column < tblDataProcess.getColumnCount(); column++) {
                    int width = 30;
                    columnModel.getColumn(column).setPreferredWidth(width);
                }
                tblDataProcess.setRowHeight(0, 30);
                tblDataProcess.setRowHeight(1, 30);
                tblDataProcess.setRowHeight(2, 30);
                tblDataProcess.setRowHeight(3, 30);
                tblDataProcess.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);

                /*------------------------ Intrusion Detection ------------------------*/

                DefaultTableModel model4id = (DefaultTableModel)tblIntrusionDetection.getModel();
                for ( int i=1; i<COL_COUNT; i++ ) {
                    model4id.addColumn(String.valueOf(i));
                }

                tblIntrusionDetection.getColumnModel().getColumn(0).setPreferredWidth(250);
                final TableColumnModel columnModel4id = tblIntrusionDetection.getColumnModel();
                for (int column = 1; column < tblIntrusionDetection.getColumnCount(); column++) {
                    int width = 30;
                    columnModel4id.getColumn(column).setPreferredWidth(width);
                }
                tblIntrusionDetection.setRowHeight(0, 30);
                tblIntrusionDetection.setRowHeight(1, 30);
                tblIntrusionDetection.setRowHeight(2, 30);
                tblIntrusionDetection.setRowHeight(3, 30);
                tblIntrusionDetection.setRowHeight(4, 30);
                tblIntrusionDetection.setRowHeight(5, 30);
                tblIntrusionDetection.setRowHeight(6, 30);
                tblIntrusionDetection.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
                /*------------------------ Intrusion Detection ------------------------*/
                
                try {
                    strBase4CC = lookup4CC.getScheme4Malware();
                } catch (RemoteException ex) {
                    Logger.getLogger(Malware.class.getName()).log(Level.SEVERE, null, ex);
                }

                strKeyGenerated = "";
                for ( int i=1; i<COL_COUNT; i++ ) {
                    model.setValueAt(particles[Integer.parseInt(strEntangledParticles.substring(i-1, i))], 0, i);
                    model.setValueAt(schemes[Integer.parseInt(strBase4Malware.substring(i-1, i))], 1, i);
                    model.setValueAt(schemes[Integer.parseInt(strBase4CC.substring(i-1, i))], 2, i);

                    if ( schemes[Integer.parseInt(strBase4Malware.substring(i-1, i))].equals(
                            schemes[Integer.parseInt(strBase4CC.substring(i-1, i))]) ) {
                        strKeyGenerated = strKeyGenerated+String.valueOf(Integer.parseInt(strEntangledParticles.substring(i-1, i)));
                        model.setValueAt(String.valueOf(Integer.parseInt(strEntangledParticles.substring(i-1, i))), 3, i);
                    }
                }
                txtUseoftheAgreedKey.setText(strKeyGenerated);

                /*------------------------ Intrusion Detection ------------------------*/
                Random rand = new Random();
                strParticles4Soc = "";
                for ( int i=0; i<Integer.parseInt(strInputKeyLength); i++ ) {
                    strBase4Soc = strBase4Soc+String.valueOf(rand.nextInt(4));
                    if ( getRandomBoolean() ) {
                        strParticles4Soc = strParticles4Soc+"1";
                    }
                    else {
                        strParticles4Soc = strParticles4Soc+"0";
                    }
                }

                boolean flag = false;
                for ( int i=1; i<COL_COUNT; i++ ) {
                    model4id.setValueAt(particles[Integer.parseInt(strEntangledParticles.substring(i-1, i))], 0, i);
                    model4id.setValueAt(schemes[Integer.parseInt(strBase4Soc.substring(i-1, i))], 1, i);
                    model4id.setValueAt(particles[Integer.parseInt(strParticles4Soc.substring(i-1, i))], 2, i);
                    model4id.setValueAt(schemes[Integer.parseInt(strBase4CC.substring(i-1, i))], 3, i);
                    
                    if ( schemes[Integer.parseInt(strBase4Soc.substring(i-1, i))].equals(
                            schemes[Integer.parseInt(strBase4CC.substring(i-1, i))]) ) {
                        model4id.setValueAt(String.valueOf(Integer.parseInt(strParticles4Soc.substring(i-1, i))), 4, i);
                        model4id.setValueAt(String.valueOf(Integer.parseInt(strEntangledParticles.substring(i-1, i))), 5, i);

                        if ( !model4id.getValueAt(4, i).toString().equals(model4id.getValueAt(5, i).toString()) ) {
                            model4id.setValueAt("×", 6, i);

                            lblIntrusionDetection.setText("Soc's intrusion was detected!");
                            flag = true;
                        } else {
                            model4id.setValueAt("◌", 6, i);
                        }
                    }
                }

                if ( !flag ) {
                    lblIntrusionDetection.setText("Fortunately Soc's intrusion was not detected!");
                }
                /*------------------------ Intrusion Detection ------------------------*/

                try {
                    lookup4CC.getKeyGenerated(strKeyGenerated);
                } catch (RemoteException ex) {
                    Logger.getLogger(Malware.class.getName()).log(Level.SEVERE, null, ex);
                }

                DigestSHA3 sha3256 = new SHA3.Digest256();
                try {
                    sha3256.update(strKeyGenerated.getBytes("UTF-8"));
                } catch (UnsupportedEncodingException ex) {
                    Logger.getLogger(Malware.class.getName()).log(Level.SEVERE, null, ex);
                }
                StringBuilder sb = new StringBuilder();
                for (byte b : sha3256.digest()) {
                    sb.append(String.format("%02x", b));
                }
                // System.out.println(Hex.toHexString(sha3256.digest()));

                txtUseoftheHashobtainedbyMalware.setText(sb.toString().toLowerCase());

                txtInitialKeySize.setText(strInputKeyLength);
                txtFinalKeySize.setText(String.valueOf(strKeyGenerated.length()));
                txtPercentage.setText(String.format("%.2f", strKeyGenerated.length()*1.0/Integer.parseInt(strInputKeyLength)*100)+" %");

                txtKey.setText(strKeyGenerated);
            }
        });
        menuBar.add(extMenu);

        extMenu.add(itemShowCommunicationResult);
        itemShowCommunicationResult.addActionListener(new ActionListener(){
            public void actionPerformed(ActionEvent e) {
                winDataProcess.setVisible(true);
            }
        });

        extMenu.add(itemSendEncryptedMsg);
        itemSendEncryptedMsg.addActionListener(new ActionListener(){
            public void actionPerformed(ActionEvent e) {
                winDecipheredModule.setVisible(true);
            }
        });

        extMenu.add(new JSeparator());
        extMenu.add(itemIntrusionDetection);
        itemIntrusionDetection.addActionListener(new ActionListener(){
            public void actionPerformed(ActionEvent e) {
                winIntrusionDetection.setVisible(true);
            }
        });

        try {
            final Image img = ImageIO.read(getClass().getResource("resources/back.png"));
            window.setContentPane(new JPanel() {
                 @Override
                 public void paintComponent(Graphics g) {
                    super.paintComponent(g);
                    g.drawImage(img, 0, 0, null);
                 }
              });
        } catch (IOException ex) {
            Logger.getLogger(Source.class.getName()).log(Level.SEVERE, null, ex);
        }

        window.setLayout(null);
        window.setResizable(false);
        window.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); // If Click into The Red Button => End The Processus
        window.setVisible(true);

        winDataProcess = new JFrame("Key - Malware");
        winDataProcess.setSize(600, 360); // Height And Width Of Window
        winDataProcess.setLocationRelativeTo(null); // Move Window To Center

        lblDataProcess = new JLabel("Data Process");
        lblDataProcess.setBounds(250,10,100,30);
        winDataProcess.add(lblDataProcess);

        panDataProcess = new JPanel();
        panDataProcess.setBounds(30,60,540,160);
        panDataProcess.setLayout(new BorderLayout());

        COL_COUNT = 1;

        String [][] data4Table = new String[ROW_COUNT][COL_COUNT];
        String[] header = new String[COL_COUNT];

        header[0] = "";
        data4Table[0][0] = "Particles received by Malware";
        data4Table[1][0] = "Scheme generated by Malware";
        data4Table[2][0] = "Scheme generated by C&C(received)";
        data4Table[3][0] = "Coincidences obtained by Malware";
        /* for ( int i=1; i<COL_COUNT; i++ ) {
            header[i] = String.valueOf(i);
            data4Table[0][i] = "";
            data4Table[1][i] = "";
            data4Table[2][i] = "";
            data4Table[3][i] = "";
        } */

        TableModel model = new DefaultTableModel(data4Table, header)
        {
            public boolean isCellEditable(int row, int column)
            {
                return false;//This causes all cells to be not editable
            }
        };
        tblDataProcess = new JTable(model);
        tblDataProcess.getColumnModel().getColumn(0).setPreferredWidth(250);
        final TableColumnModel columnModel = tblDataProcess.getColumnModel();
        for (int column = 1; column < tblDataProcess.getColumnCount(); column++) {
            int width = 30;
            columnModel.getColumn(column).setPreferredWidth(width);
        }
        tblDataProcess.setRowHeight(0, 30);
        tblDataProcess.setRowHeight(1, 30);
        tblDataProcess.setRowHeight(2, 30);
        tblDataProcess.setRowHeight(3, 30);
        tblDataProcess.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);

        panDataProcess.add(new JScrollPane(tblDataProcess));

        /*------------------------ Intrusion Detection ------------------------*/
        winIntrusionDetection = new JFrame("Intrusion Detection - Malware");
        winIntrusionDetection.setSize(600, 380); // Height And Width Of Window
        winIntrusionDetection.setLocationRelativeTo(null); // Move Window To Center

        lblIntrusionDetection = new JLabel("Intrusion Detection");
        lblIntrusionDetection.setBounds(250,10,200,30);
        winIntrusionDetection.add(lblIntrusionDetection);

        panIntrusionDetection = new JPanel();
        panIntrusionDetection.setBounds(30,60,540,260);
        panIntrusionDetection.setLayout(new BorderLayout());

        String [][] data4Table4id = new String[ROW_COUNT4ID][COL_COUNT];
        String[] header4id = new String[COL_COUNT];

        header4id[0] = "";
        data4Table4id[0][0] = "Particles received by Malware";
        data4Table4id[1][0] = "Scheme generated by Soc(Intruder)";
        data4Table4id[2][0] = "Particles generated by Soc";
        data4Table4id[3][0] = "Scheme generated by C&C(received)";
        data4Table4id[4][0] = "Coincidences obtained by Soc";
        data4Table4id[5][0] = "Coincidences obtained by C&C";
        data4Table4id[6][0] = "Check by particles received by Malware";
        /* for ( int i=1; i<COL_COUNT; i++ ) {
            header[i] = String.valueOf(i);
            data4Table[0][i] = "";
            data4Table[1][i] = "";
            data4Table[2][i] = "";
            data4Table[3][i] = "";
        } */

        TableModel model4id = new DefaultTableModel(data4Table4id, header4id)
        {
            public boolean isCellEditable(int row, int column)
            {
                return false;//This causes all cells to be not editable
            }
        };
        tblIntrusionDetection = new JTable(model4id);
        tblIntrusionDetection.getColumnModel().getColumn(0).setPreferredWidth(250);
        final TableColumnModel columnModel4id = tblIntrusionDetection.getColumnModel();
        for (int column = 1; column < tblIntrusionDetection.getColumnCount(); column++) {
            int width = 30;
            columnModel4id.getColumn(column).setPreferredWidth(width);
        }
        tblIntrusionDetection.setRowHeight(0, 30);
        tblIntrusionDetection.setRowHeight(1, 30);
        tblIntrusionDetection.setRowHeight(2, 30);
        tblIntrusionDetection.setRowHeight(3, 30);
        tblIntrusionDetection.setRowHeight(4, 30);
        tblIntrusionDetection.setRowHeight(5, 30);
        tblIntrusionDetection.setRowHeight(6, 30);
        tblIntrusionDetection.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);

        panIntrusionDetection.add(new JScrollPane(tblIntrusionDetection));

        winIntrusionDetection.add(panIntrusionDetection);

        winIntrusionDetection.setLayout(null);
        winIntrusionDetection.setResizable(false);
        winIntrusionDetection.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE); // If Click into The Red Button => End The Processus
        /*------------------------ Intrusion Detection ------------------------*/
        
        winDataProcess.add(panDataProcess);

        lblUseoftheAgreedKey = new JLabel("Use of the agreed key");
        lblUseoftheAgreedKey.setBounds(30,230,150,25);
        winDataProcess.add(lblUseoftheAgreedKey);

        txtUseoftheAgreedKey = new JTextField();
        txtUseoftheAgreedKey.setBounds(185, 230, 400, 25);
        txtUseoftheAgreedKey.setEnabled(false);
        winDataProcess.add(txtUseoftheAgreedKey);

        lblUseoftheHashobtainedbyMalware = new JLabel("Use of the hash obtained by Malware");
        lblUseoftheHashobtainedbyMalware.setBounds(30,260,220,25);
        winDataProcess.add(lblUseoftheHashobtainedbyMalware);

        txtUseoftheHashobtainedbyMalware = new JTextField();
        txtUseoftheHashobtainedbyMalware.setBounds(255, 260, 330, 25);
        // txtUseoftheHashobtainedbyMalware.setEnabled(false);
        winDataProcess.add(txtUseoftheHashobtainedbyMalware);

        lblInitialKeySize = new JLabel("Initial Key Size");
        lblInitialKeySize.setBounds(30,290,90,25);
        winDataProcess.add(lblInitialKeySize);

        txtInitialKeySize = new JTextField();
        txtInitialKeySize.setBounds(125, 290, 80, 25);
        txtInitialKeySize.setEnabled(false);
        winDataProcess.add(txtInitialKeySize);

        lblFinalKeySize = new JLabel("Final Key Size");
        lblFinalKeySize.setBounds(210,290,80,25);
        winDataProcess.add(lblFinalKeySize);

        txtFinalKeySize = new JTextField();
        txtFinalKeySize.setBounds(295, 290, 80, 25);
        txtFinalKeySize.setEnabled(false);
        winDataProcess.add(txtFinalKeySize);

        lblPercentage = new JLabel("Percentage");
        lblPercentage.setBounds(380,290,80,25);
        winDataProcess.add(lblPercentage);

        txtPercentage = new JTextField();
        txtPercentage.setBounds(465, 290, 80, 25);
        txtPercentage.setEnabled(false);
        winDataProcess.add(txtPercentage);

        winDataProcess.setLayout(null);
        winDataProcess.setResizable(false);
        winDataProcess.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE); // If Click into The Red Button => End The Processus

        winDecipheredModule = new JFrame("Deciphered Module");
        winDecipheredModule.setSize(400, 220); // Height And Width Of Window
        winDecipheredModule.setLocationRelativeTo(null); // Move Window To Center

        lblIPReceiver = new JLabel("IP Receiver");
        lblIPReceiver.setBounds(10,30,120,25);
        lblIPReceiver.setHorizontalAlignment(SwingConstants.RIGHT);
        winDecipheredModule.add(lblIPReceiver);

        txtIPReceiver = new JTextField();
        txtIPReceiver.setBounds(135, 30, 250, 25);
        txtIPReceiver.setEnabled(false);
        winDecipheredModule.add(txtIPReceiver);

        lblKey = new JLabel("Key");
        lblKey.setBounds(10,60,120,25);
        lblKey.setHorizontalAlignment(SwingConstants.RIGHT);
        winDecipheredModule.add(lblKey);

        txtKey = new JTextField();
        txtKey.setBounds(135, 60, 250, 25);
        txtKey.setEnabled(false);
        winDecipheredModule.add(txtKey);

        lblLastMsgSent = new JLabel("Last Msg Sent(0x)");
        lblLastMsgSent.setBounds(10,90,120,25);
        lblLastMsgSent.setHorizontalAlignment(SwingConstants.RIGHT);
        winDecipheredModule.add(lblLastMsgSent);

        txtLastMsgSent = new JTextField();
        txtLastMsgSent.setBounds(135, 90, 250, 25);
        txtLastMsgSent.setEnabled(false);
        winDecipheredModule.add(txtLastMsgSent);

        lblMessageSent = new JLabel("Message Sent");
        lblMessageSent.setBounds(10,120,120,25);
        lblMessageSent.setHorizontalAlignment(SwingConstants.RIGHT);
        winDecipheredModule.add(lblMessageSent);

        txtMessageSent = new JTextField();
        txtMessageSent.setBounds(135, 120, 250, 25);
        winDecipheredModule.add(txtMessageSent);

        btnSubmit = new JButton("Submit");
        btnSubmit.setBounds(150, 150, 100, 25);

        btnSubmit.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e){
                if ( txtMessageSent.getText().equals("") ) {
                    JOptionPane.showMessageDialog(null, "Please input message", "Error", JOptionPane.OK_OPTION);
                    return;
                }

                if ( txtKey.getText().equals("") ) {
                    JOptionPane.showMessageDialog(null, "Generate the key first", "Error", JOptionPane.OK_OPTION);
                    return;
                }

                txtLastMsgSent.setText(AES.encrypt(txtMessageSent.getText(), txtKey.getText()));
                try {
                    lookup4CC.getLastSentMsg(txtLastMsgSent.getText());
                } catch (RemoteException ex) {
                    Logger.getLogger(Malware.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
        winDecipheredModule.add(btnSubmit);

        winDecipheredModule.setLayout(null);
        winDecipheredModule.setResizable(false);
        winDecipheredModule.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE); // If Click into The Red Button => End The Processus
    }

    public static boolean getRandomBoolean() {
        return Math.random() < 0.5;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        // TODO code application logic here
        new Malware();
    }

}
